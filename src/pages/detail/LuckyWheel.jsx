import React, { useEffect, useState } from 'react';
import { Button, Modal, notification } from 'antd';
import { FaArrowsSpin } from "react-icons/fa6";
import { fetchAllVoucher } from '../../services/voucherAPI';
import { fetchAllHopQua, nhanThuong, quaySoHopQua } from '../../services/hopQuaAPI';
import { useSelector } from 'react-redux';
import { Wheel } from 'react-custom-roulette'



const LuckyWheel = () => {
  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [modalVisible, setModalVisible] = useState(false); 
  const [showFireworks, setShowFireworks] = useState(false);
  const [dataVoucher, setDataVoucher] = useState([])
  const [dataHopQua, setDataHopQua] = useState([])
  const customerId = useSelector(state => state.accountKH.user._id)

  const fetchTatCaVoucher = async () => {
      let query = 'page=1&limit=1000'
      let res = await fetchAllVoucher(query)
      if(res && res.data){
          setDataVoucher(res.data)
      }
  }
  const fetchTatCaHopQua = async () => {
    let query = 'page=1&limit=1000'
    let res = await fetchAllHopQua(query)
    console.log("res: ", res);    
    if(res && res.data){
      console.log("Response data:", res.data);
      setDataHopQua(res.data)
    }
  } 

  useEffect(() => {
      fetchTatCaVoucher()
  }, [])

  useEffect(() => {
    fetchTatCaHopQua()
}, [])

  useEffect(() => {
    if (customerId) {
      fetchTatCaHopQua();
    } else {
      console.log("customerId is not defined");
    }
  }, [customerId]);

   

  console.log("dataHopQua: ", dataHopQua);
  console.log("customerId: ", customerId);
  console.log("prizeNumber: ", prizeNumber);
  
  const data = (Array.isArray(dataHopQua) && dataHopQua.length > 0) ? dataHopQua.map((item) => (
    {
      _id: item?._id,
      option: item?.tenHopQua,
      message: item?.messageHopQua || 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!',
      IdVoucher: item?.IdVoucher || null,
      IdKH: item?.IdKH || [],
    }
  )) : [];

  const data1 = [
    { _id: null, message: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!', option: 'Kh√¥ng c√≥ qu√†' }, // Qu√† kh√¥ng c√≥ voucher
    { _id: dataVoucher[0]?._id, message: dataVoucher[0]?.code, option: 'Qu√† s·ªë 2 üßßüéÅ' }, // Qu√† c√≥ voucher
    { _id: null, message: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!', option: 'Kh√¥ng c√≥ qu√†' }, // Qu√† kh√¥ng c√≥ voucher
    { _id: dataVoucher[1]?._id, message: dataVoucher[1]?.code, option: 'Qu√† s·ªë 4 üßßüéÅ' }, // Qu√† c√≥ voucher
    { _id: null, message: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!', option: 'Kh√¥ng c√≥ qu√†' }, // Qu√† kh√¥ng c√≥ voucher
    { _id: dataVoucher[2]?._id, message: dataVoucher[2]?.code, option: 'Qu√† s·ªë 6 üßßüéÅ' }, // Qu√† c√≥ voucher
    { _id: null, message: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!', option: 'Kh√¥ng c√≥ qu√†' }, // Qu√† kh√¥ng c√≥ voucher
  ];

  console.log("data: ", data);
 
  const handleSpinComplete = () => {
    setShowFireworks(true);   

    // Hi·ªÉn th·ªã modal v·ªõi ph·∫ßn th∆∞·ªüng tr√∫ng
    setModalVisible(true);
    setShowFireworks(false);
    
  };

  const handleCancel = () => {
    setModalVisible(false);
    setMustSpin(false);
  }

  const nhanThuongSubmit = async () => {
    try {
        if (!data[prizeNumber].IdVoucher._id) {
            return notification.error({
                message: 'Nh·∫≠n th∆∞·ªüng kh√¥ng th√†nh c√¥ng!',
                description: 'Kh√¥ng c√≥ qu√† nh·∫≠n t·ª´ h·ªôp qu√† n√†y!',
            });
        }
        let res = await nhanThuong(customerId, data[prizeNumber].IdVoucher._id);

        if (res.errCode === 0) {
            notification.success({
                message: 'Nh·∫≠n th∆∞·ªüng th√†nh c√¥ng!',
                description: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c qu√† t·∫∑ng t·ª´ ch√∫ng t√¥i!',
            });
        } else {
            notification.error({
                message: 'Nh·∫≠n th∆∞·ªüng kh√¥ng th√†nh c√¥ng!',
                description: res.message || 'C√≥ l·ªói x·∫£y ra khi nh·∫≠n th∆∞·ªüng!',
            });
        }

        handleCancel();
    } catch (error) {
        notification.error({
            message: 'Nh·∫≠n th∆∞·ªüng kh√¥ng th√†nh c√¥ng!',
            description: error.message,
        });
    }
  }

  const handleSpinClick = async () => {
    try {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ customerId, kh√¥ng th·ªÉ quay s·ªë
        if (!customerId) {
            return notification.error({
                message: 'Quay s·ªë kh√¥ng th√†nh c√¥ng!',
                description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ quay s·ªë!',
            });
        }

        // G·ªçi API quay s·ªë
        let qso = await quaySoHopQua(customerId);

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ h·∫øt l∆∞·ª£t quay
        if (qso.errCode === -1) {
            return notification.error({
                message: 'Quay s·ªë kh√¥ng th√†nh c√¥ng!',
                description: 'B·∫°n ƒë√£ h·∫øt l∆∞·ª£t quay s·ªë may m·∫Øn!',
            });
        }

        // N·∫øu quay s·ªë th√†nh c√¥ng, ti·∫øn h√†nh quay v√† hi·ªÉn th·ªã th√¥ng b√°o
        if (qso.errCode === 0) {
            setMustSpin(true);
            setPrizeNumber(Math.floor(Math.random() * data.length));

            notification.warning({
                message: 'ƒêang quay s·ªë tr√∫ng th∆∞·ªüng, vui l√≤ng ch·ªù ƒë·ªÉ nh·∫≠n qu√†...',
                description: `S·ªë l∆∞·ª£t quay c√≤n l·∫°i: ${qso.quayMayManCount}`,
            });
        }
    } catch (error) {
        // X·ª≠ l√Ω l·ªói khi x·∫£y ra
        notification.error({
            message: 'Quay s·ªë kh√¥ng th√†nh c√¥ng!',
            description: error.message,
        });
    }
  };

  return (
    <div style={{ textAlign: 'center', marginTop: '50px', }}>
        {data.length > 0 ? (          
          <Wheel
              mustStartSpinning={mustSpin}
              prizeNumber={prizeNumber}
              data={data} 
              backgroundColors={[
                '#FF6384', // M√†u ƒë·ªè
                '#36A2EB', // M√†u xanh d∆∞∆°ng
                '#FFCE56', // M√†u v√†ng
                '#4BC0C0', // M√†u xanh ng·ªçc
                '#9966FF', // M√†u t√≠m
                '#FF9F40', // M√†u cam
                '#FF6347', // M√†u ƒë·ªè t∆∞∆°i
                '#00CCFF', // M√†u xanh da tr·ªùi
                '#66CDAA', // M√†u xanh l√° c√¢y nh·∫°t
                '#FFA500', // M√†u cam s√°ng
                '#800080', // M√†u t√≠m ƒë·∫≠m
                '#22C1C3', // M√†u xanh bi·ªÉn nh·∫°t
              ]}
              textColors={['#ffffff']}
              outerBorderWidth={2} // Vi·ªÅn m·ªèng h∆°n
              radiusLineWidth={2} // ƒê∆∞·ªùng k·∫ª gi·ªØa c√°c ph·∫ßn m·ªèng h∆°n
              fontSize={14} // K√≠ch th∆∞·ªõc ch·ªØ nh·ªè h∆°n           
              onStopSpinning={handleSpinComplete}
          />
        ) : (
          <p>Loading...</p>
        )} 


        <Button
            type="primary"
            size='large'
            icon={<FaArrowsSpin />}
            onClick={handleSpinClick}
            style={{ marginTop: '20px', borderRadius: '20px' }}
            disabled={mustSpin} // NgƒÉn ch·∫∑n b·∫•m nhi·ªÅu l·∫ßn khi ƒëang quay
        >
            Click v√†o ƒë√¢y ƒë·ªÉ quay s·ªë tr√∫ng th∆∞·ªüng
        </Button>

        <Modal
        title="üí•üí•üí•Tr√∫ng r·ªìi k√¨a!"
        visible={modalVisible}
        onCancel={handleCancel}
        maskClosable={false}
        footer={[
          <div>
          <Button key="close" onClick={handleCancel} style={{width: "45%"}}>
            Close
          </Button>
          {data[prizeNumber] && data[prizeNumber].IdVoucher && data[prizeNumber].IdVoucher._id ? (
            <Button onClick={nhanThuongSubmit} style={{width: "45%", marginLeft: "10%"}}>
              Nh·∫≠n th∆∞·ªüng
            </Button>
          ) : ''}           
          </div>
        ]}
      >
        <p style={{ color: "green" }}>{data[prizeNumber]?.message || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p>B·∫°n ƒë√£ quay v√†o √¥ <span style={{ color: "red" }}>{data[prizeNumber]?.option || "Kh√¥ng x√°c ƒë·ªãnh"}</span></p>
        {data[prizeNumber]?.IdVoucher ? (
          <p>
            üéÅ Gi·∫£i th∆∞·ªüng l√†: <br /><br />
            <span style={{ color: "red" }}>
              CODE: &nbsp; {data[prizeNumber]?.IdVoucher?.code} <br/> <span style={{ color: "navy" }}>ƒêi·ªÅu ki·ªán √°p d·ª•ng t·ªïng ƒë∆°n h√†ng tr√™n </span>
              {data[prizeNumber]?.IdVoucher?.dieuKien
                ? Number(data[prizeNumber]?.IdVoucher.dieuKien).toLocaleString("vi-VN", {
                    style: "currency",
                    currency: "VND",
                  })
                : "Kh√¥ng c√≥ ƒëi·ªÅu ki·ªán"
              } 
              <br/> <span style={{ color: "navy" }}>ƒê∆∞·ª£c gi·∫£m: </span> 
              {data[prizeNumber]?.IdVoucher?.giamGia}% <span style={{ color: "navy" }}>t·ªïng gi√° tr·ªã ƒë∆°n h√†ng </span>  
              <br /><br />
            </span>
              <span style={{ fontSize: "16px" }}>
                  ‚åö Ng√†y h·∫øt h·∫°n: <span style={{ color: "red" }}>{data[prizeNumber]?.IdVoucher?.thoiGianHetHan}</span>
              </span>
          </p>
        ) : (
          <p>Ti·∫øc qu√°, h·ªôp qu√† n√†y kh√¥ng c√≥ gi·∫£i th∆∞·ªüng üò≠üò≠</p>
        )}
      </Modal>
    </div>
  );
};

export default LuckyWheel;
