import { RiDeleteBin6Line, RiDiscountPercentFill } from "react-icons/ri"
import { Avatar, Button, Card, Col, Divider, Flex, Form, Input, message, Modal, notification, Popconfirm, Row, Space, Switch, Table, Tag, Tooltip, Upload, Typography  } from 'antd';
import { IoCopy, IoDiamondSharp, IoGift } from "react-icons/io5";
import { MdEmail, MdOutlineCancel, MdOutlineProductionQuantityLimits, MdOutlineShoppingCartCheckout } from "react-icons/md";
import imgVoucher from '../../assets/images/869649.png'
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { doiThongTinKH, fetchOneAccKH } from "../../services/accKhAPI";
import { useEffect, useState } from "react";
import { handleLogout } from "../../services/loginKHAPI";
import { doLogoutAction } from "../../redux/accKH/accountSlice";
import { doLogoutActionCart } from "../../redux/order/orderSlice";
import { doLoginActionWishlist } from "../../redux/wishlist/wishlistSlice";
import { FaAddressCard, FaCartPlus, FaCrown, FaEye, FaLink, FaPhone, FaRegAddressCard, FaSave, FaStar, FaTrophy } from "react-icons/fa";
import Password from "antd/es/input/Password";
import bcrypt from 'bcryptjs-react';
import { CheckCircleOutlined, CrownOutlined, DeleteOutlined, ExclamationCircleOutlined, EyeOutlined, HourglassOutlined, LoadingOutlined, PlusOutlined } from "@ant-design/icons";
import { v4 as uuidv4 } from 'uuid';
import { deleteImg, uploadImg } from "../../services/uploadAPI";
import { handleHuyOrder, historyOrderByIdKH } from "../../services/orderAPI";
// import moment from "moment/moment";
import moment from 'moment-timezone';
import DrawerViewOrder from "./DrawerViewOrder";
import { TbPasswordUser } from "react-icons/tb";
const { Text } = Typography;
import { FaUser } from "react-icons/fa";

const Account = () => {

    const navigate = useNavigate()
    const customerId = useSelector(state => state.accountKH.user._id)
    const user = useSelector(state => state.accountKH.user)

    const dispatch = useDispatch();
    const [sortQuery, setSortQuery] = useState("sort=createdAt");
    const [dataAccKH, setDataAccKH] = useState(null)
    const [dataAcc, setDataAcc] = useState(null)
    const [dataOrderHistory, setDataOrderHistory] = useState(null)
    const [loading, setLoading] = useState(false);
    const [loadingOrder, setLoadingOrder] = useState(false);
    const [fileList, setFileList] = useState([]);
    const [imageUrl, setImageUrl] = useState('');    
    const [isModalVisible, setIsModalVisible] = useState(false);
    
    const [dataOrder, setDataOrder] = useState([])
    const [current, setCurrent] = useState(1)
    const [pageSize, setPageSize] = useState(5)
    const [total, setTotal] = useState(0)

    const [openViewDH, setOpenViewDH] = useState(false)
    const [dataViewDH, setDataViewDH] = useState(null)

    const [soLuongDonThanhCong, setSoLuongDonThanhCong] = useState(0)
    const [tongDoanhThuThanhCong, setTongDoanhThuThanhCong] = useState(0)

    const [formAcc] = Form.useForm()

    const handleDoiTT = async (values) => {

        const {
            _idAcc, fullName, email, phone, address, password, passwordMoi
        } = values
        console.log("password: ", password);
        console.log("fullName, email, phone, address, passwordMoi: ", fullName, email, phone, address, passwordMoi);

        const matKhauCu = dataAcc?.password
        console.log("mk cu: ", matKhauCu);
        
        const isMatch = await bcrypt.compare(password, matKhauCu); // So s√°nh password nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a

        if (!imageUrl) {
            notification.error({
                message: 'L·ªói validate',
                description: 'Vui l√≤ng upload ·∫¢nh'
            })
            return;
        }
        

        if (isMatch) {
            console.log("M·∫≠t kh·∫©u c≈© ch√≠nh x√°c. C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi...");

            const res = await doiThongTinKH(_idAcc, fullName, email, phone, address, passwordMoi, imageUrl.url)
            if(res && res.data) {
                message.success(res.message)
                message.success('Y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i!')
                setImageUrl('')
                dispatch(doLogoutAction())
                dispatch(doLogoutActionCart())
                dispatch(doLoginActionWishlist())
            } else {
                notification.error({ 
                    message: "ƒê·ªïi th√¥ng tin th·∫•t b·∫°i!",
                    description: res.message && Array.isArray(res.message) ? res.message[0] : res.message,
                    duration: 5,
                });
            }

        } else {
            notification.error({
                message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c",
                description: "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u c≈© ƒë√∫ng."
            });
        }

    }
    console.log("dataAcc: ", dataAcc);
    console.log("dataAccKH: ", dataAccKH);

    const fetchOneAcc = async () => {
        let id = `id=${customerId}`
        const res = await fetchOneAccKH(id)
        console.log("res voucher tk: ", res.data);
        
        if (res && res.data) {
            setDataAccKH(res.data)            
            setDataAcc(res.data?.[0])     
            setSoLuongDonThanhCong(res.soLuongDonThanhCong)       
            setTongDoanhThuThanhCong(res.tongDoanhThuThanhCong)       
        }
    }

    useEffect(() => {
        if (dataAcc) {     
            if (dataAcc.image) {    
                setFileList([
                    {
                        uid: uuidv4(),
                        name: dataAcc.image, // T√™n file
                        status: 'done', // Tr·∫°ng th√°i
                        url: dataAcc.image, // ƒê∆∞·ªùng d·∫´n ƒë·∫øn h√¨nh ·∫£nh
                    },
                ]);
            }              
            const init = {
                _idAcc: dataAcc?._id,                
                fullName: dataAcc?.fullName,                
                email: dataAcc?.email,                
                phone: dataAcc?.phone,                
                address: dataAcc?.address,                                
                image: dataAcc?.image,                                
            }
            console.log("init: ", init);
            // setImageUrl(dataAcc?.image)   
            setImageUrl({
                url: dataAcc?.image,
                public_id: "", // ho·∫∑c null n·∫øu kh√¥ng c√≥
            });  
            formAcc.setFieldsValue(init);            
        }
        return () => {
            formAcc.resetFields();
        }
    },[dataAcc])

    useEffect(() => {
        fetchOneAcc()
    },[customerId])   
    
    const logoutClick = async () => {
        const res = await handleLogout()
        if(res) {
          dispatch(doLogoutAction())
          dispatch(doLogoutActionCart())
          dispatch(doLoginActionWishlist())
          message.success(res.message)
          navigate('/')
        }
    }
    const handleUploadFileImage = async ({ file, onSuccess, onError }) => {
        try {
            const res = await uploadImg(file);
        
            if (!res || !res.data || !res.data.url) {
                throw new Error("Kh√¥ng c√≥ url trong ph·∫£n h·ªìi t·ª´ server.");
            }
        
            const { url, type, public_id } = res.data;
        
            // G√°n l·∫°i cho Ant Design Upload hi·ªÉn th·ªã ·∫£nh preview
            file.url = url;
            file.public_id = public_id; // üëà G·∫Øn v√†o file ƒë·ªÉ c√≥ th·ªÉ x√≥a

            // setImageUrl(url);
            setImageUrl({ url, public_id });

            // ‚úÖ C·∫≠p nh·∫≠t fileList cho Upload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi
            setFileList([
                {
                    uid: file.uid,
                    name: file.name,
                    status: "done",
                    url: url,
                    public_id: public_id,
                },
            ]);
        
            onSuccess({
                url,
                public_id, // üëà th√™m d√≤ng n√†y ƒë·ªÉ Upload gi·ªØ l·∫°i
                type,
            });
        } catch (error) {
            console.error("L·ªói upload:", error);
            onError(error);
        }
    };
    // x√≥a ·∫£nh cloudinary
    const handleRemoveFile = async (file, type) => {
        try {
            const public_id = file.public_id;
            console.log("public_id: ", public_id);
            
    
            if (public_id) {
                await deleteImg(public_id); // G·ªçi API x√≥a ·∫£nh ·ªü server
                message.success("Xo√° ·∫£nh th√†nh c√¥ng");
            }
    
            if (type === "thumbnail") {
                setImageUrl(""); // ho·∫∑c setImageUrl(null);
            }           
           
        } catch (error) {
            console.error("L·ªói khi xo√° ·∫£nh:", error);
            message.error("Xo√° ·∫£nh th·∫•t b·∫°i");
        }
    };

    // upload ·∫£nh    
    const handleUploadFileImage1 = async ({ file, onSuccess, onError }) => {

        setLoading(true);
        try {
            const res = await uploadImg(file);
            console.log("res upload: ", res);            
            if (res) {
                setImageUrl(res.url); // URL c·ªßa h√¨nh ·∫£nh t·ª´ server
                onSuccess(file);
                setFileList([ // ƒê·∫∑t l·∫°i fileList ch·ªâ ch·ª©a file m·ªõi
                    {
                        uid: file.uid,
                        name: file.name,
                        status: 'done',
                        url: res.url, // URL c·ªßa h√¨nh ·∫£nh t·ª´ server
                    },
                ]);
                // setDataImage()
                message.success('Upload th√†nh c√¥ng');
            } else {
                onError('ƒê√£ c√≥ l·ªói khi upload file');
            }            
        } catch (error) {
            console.error(error);
            message.error('Upload th·∫•t b·∫°i');
            onError(error);
        } finally {
            setLoading(false);
        }
    };
    const beforeUpload = (file) => {
        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
        if (!isJpgOrPng) {
            message.error('B·∫°n ch·ªâ c√≥ th·ªÉ t·∫£i l√™n h√¨nh ·∫£nh JPG/PNG!');
        }
        return isJpgOrPng;
    };

    const handleChange = (info) => {
        if (info.file.status === 'done') {
            message.success(`upload file ${info.file.name} th√†nh c√¥ng`);
        } else if (info.file.status === 'error') {
            message.error(`${info.file.name} upload file th·∫•t b·∫°i!`);
        }
    };
    const handleRemoveFile1 = (file) => {
        setFileList([]); // Reset fileList khi x√≥a file
        setImageUrl(''); // Reset URL khi x√≥a file
        message.success(`${file.name} ƒë√£ ƒë∆∞·ª£c x√≥a`);
    };
    // m·ªü ƒë√≥ng modal h√¨nh ·∫£nh
    const handlePreview = async (file) => {
        setImageUrl(fileList[0].url); // L·∫•y URL c·ªßa h√¨nh ·∫£nh
        setIsModalVisible(true); // M·ªü modal
    };

    const linkTTGH = (item) => {
        window.open(item, '_blank');
    }

    const findAllOrder = async () => {
        setLoadingOrder(true)
        let query = `page=${current}&limit=${pageSize}&idKH=${customerId}`
        if (sortQuery) {
            query += `&${sortQuery}`;
        } 
        let res = await historyOrderByIdKH(query)
        console.log("res his order: ", res);
        if(res && res.data) {
            setDataOrder(res.data?.findOrder)
            setTotal(res.data?.totalOrder)
        }
        setLoadingOrder(false)
    }

    useEffect(() => {
        findAllOrder()
    },[customerId, current, pageSize, sortQuery])

    const columns = [
        {
            title: 'M√£ ƒë∆°n',
            dataIndex: '_id',
            key: '_id',
            render: (text) => <span style={{fontWeight: "bold"}}>#{text.slice(-6)}</span>, // L·∫•y 6 k√Ω t·ª± cu·ªëi c√πng
            width: 50
        },
        {
            title: 'ng√†y ƒë·∫∑t ƒë∆°n',
            dataIndex: 'createdAt',
            key: 'createdAt',
            render: (text, record) => {
                return (
                    // <>{moment(record.createdAt).format('DD-MM-YYYY  (hh:mm:ss)')}</>
                    <>{moment(record.createdAt).tz('Asia/Ho_Chi_Minh').format('DD-MM-YYYY (HH:mm:ss)')}</>
                )
            },
            sorter: true
        },        
        {
          title: <span style={{justifyContent: "center", display: "flex"}}>tr·∫°ng th√°i</span>,
          key: 'status',
          dataIndex: 'status',
          render: (text, record) => {            
            // H√†m l·∫•y m√†u v√† icon cho TinhTrangDonHang
            const getStatusTagForTinhTrangDonHang = (status) => {
                if (status === "Ch∆∞a giao h√†ng") {
                    return { color: 'red', icon: <ExclamationCircleOutlined /> };
                }
                if (status === "ƒêang giao h√†ng") {
                    return { color: 'orange', icon: <HourglassOutlined /> };
                }
                return { color: 'blue', icon: <CheckCircleOutlined /> }; // "ƒê√£ giao h√†ng"
            };
        
            // H√†m l·∫•y m√†u v√† icon cho TinhTrangThanhToan
            const getStatusTagForTinhTrangThanhToan = (status) => {
                return status === "Ch∆∞a Thanh To√°n"
                ? { color: 'red', icon: <ExclamationCircleOutlined /> }
                : { color: 'green', icon: <CheckCircleOutlined /> }; // "ƒê√£ Thanh To√°n"
            };
        
            const donHangTag = getStatusTagForTinhTrangDonHang(record.TinhTrangDonHang);
            const thanhToanTag = getStatusTagForTinhTrangThanhToan(record.TinhTrangThanhToan);
            return (
                <div style={{justifyContent: "center", display: "flex"}}>      
                    {record?.TrangThaiHuyDon === 'Kh√¥ng H·ªßy' ? (
                        record?.TinhTrangDonHang === 'ƒê√£ giao h√†ng' && record?.TinhTrangThanhToan === 'ƒê√£ Thanh To√°n' ? 
                            <Tag color='green' icon={<CheckCircleOutlined />}>ƒê∆°n h√†ng giao th√†nh c√¥ng</Tag> : 
                        <>
                            <Tag color={donHangTag.color} icon={donHangTag.icon}>
                                {record.TinhTrangDonHang}
                            </Tag>
                            <Tag color={thanhToanTag.color} icon={thanhToanTag.icon}>
                                {record.TinhTrangThanhToan}
                            </Tag>
                        </>                        
                    ) : (
                        record?.TinhTrangThanhToan === 'Ch·ªù ho√†n ti·ªÅn' ? 
                        <>
                            <Tag color='default' icon={<CheckCircleOutlined />}>{record?.TrangThaiHuyDon}</Tag>
                            <Tag color={'warning'} icon={<ExclamationCircleOutlined />}>
                                {record.TinhTrangThanhToan}
                            </Tag>                           
                        </>  :  <Tag color='default' icon={<CheckCircleOutlined />}>{record?.TrangThaiHuyDon}</Tag>
                    ) }                    
                </div>
            );
          },
        },
        {
            title: 'T·ªîNG',
            dataIndex: 'total',
            key: 'total',
            render: (text, record) => {                
                return (
                    <>
                        <span>ƒê√£ ƒë·∫∑t {record.tongSoLuong} s·∫£n ph·∫©m</span> <br/>
                        <span>T·ªïng <span style={{color: "red"}}>{Math.ceil(record.soTienCanThanhToan).toLocaleString()} VNƒê</span> </span> 
                    </>
                );
            },
        },
        {
          title: 'ch·ª©c nƒÉng',
          key: 'action',
          render: (_, record) => (
            <Space size="middle">
                <Tooltip title="Xem t√¨nh tr·∫°ng giao h√†ng" color={'green'} key={'green'}>
                    <FaLink onClick={() => linkTTGH(record?.urlTTGH)} size={20} style={{color: "navy", fontWeight: "bold", cursor: "pointer", fontSize: "18px"}}  />
                </Tooltip>
                <Tooltip title="Xem ƒë∆°n h√†ng n√†y" color={'green'} key={'green'}>

                    <FaEye size={23} style={{color: "green", fontWeight: "bold", cursor: "pointer", fontSize: "18px"}} 
                        onClick={() => {
                            console.log("record: ", record);    
                            setOpenViewDH(true)    
                            setDataViewDH(record)                             
                        }} 
                    />
                </Tooltip>

                {record.TinhTrangDonHang === 'Ch∆∞a giao h√†ng' && record.TinhTrangThanhToan === 'ƒê√£ Thanh To√°n' && record?.TrangThaiHuyDon === 'Kh√¥ng H·ªßy' ? 
                <Tooltip title="H·ªßy ƒë∆°n h√†ng n√†y" color={'green'} key={'green'}>
                    <MdOutlineCancel onClick={() => huyDonHang(record?._id)} style={{color: "red"}} size={23} />                                           
                </Tooltip>  : ''
                }

                {record.TinhTrangDonHang === 'Ch∆∞a giao h√†ng' && record.TinhTrangThanhToan === 'Ch∆∞a Thanh To√°n' && record?.TrangThaiHuyDon === 'Kh√¥ng H·ªßy' ? 
                <Tooltip title="H·ªßy ƒë∆°n h√†ng n√†y" color={'green'} key={'green'}>
                    <MdOutlineCancel onClick={() => huyDonHang(record?._id)} style={{color: "red"}} size={23} />                                           
                </Tooltip>  : ''
                }                               

                {/* <Tooltip title="H·ªßy ƒë∆°n h√†ng n√†y" color={'green'} key={'green'}>
                    <MdOutlineCancel onClick={() => alert('xoa')} style={{color: "red"}} size={23} />                                           
                </Tooltip>                 */}
            </Space>
          ),
        },
    ];   

    const huyDonHang = async (id) => {
        let res = await handleHuyOrder(id)
        if(res && res.data) {
            message.success(res.message)
            await findAllOrder()
        } else {
            notification.error({
                message: 'H·ªßy ƒë∆°n h√†ng kh√¥ng th√†nh c√¥ng!',
                description: res.message
            })
        } 
    }
    
    const onChange = (pagination, filters, sorter, extra) => {
        console.log(">> check: pagination", pagination);
    
        // n·∫øu thay d·ªïi trang: current
        if(pagination && pagination.current){
          if( +pagination.current !== +current){
            setCurrent( +pagination.current) // v√≠ d·ª• "5" -> 5
          }
        }
    
        // n·∫øu thay ƒë·ªïi t·ªïng s·ªë ph·∫ßn t·ª≠
        if(pagination && pagination.current){
          if( +pagination.pageSize !== +pageSize){
            setPageSize( +pagination.pageSize) // v√≠ d·ª• "5" -> 5
          }
        }

        if (sorter && sorter.field) {
            const sortOrder = sorter.order === 'ascend' ? 'asc' : 'desc'; // Determine sort order
            const newSortQuery = `sort=${sorter.field}&order=${sortOrder}`;
            if (newSortQuery !== sortQuery) {
                setSortQuery(newSortQuery); // Only update if sort query changes
            }
        }
    
        window.scrollTo({ top: 80, behavior: "smooth" });
      }

    const renderMemberRank = (hangTV) => {
        switch (hangTV) {
            case "B·∫°c":
                return (
                    <>
                        <FaTrophy size={30} style={{ color: "#CD7F32", marginRight: 8 }} />
                        <span style={{ color: 'navy', fontSize: '20px', color: '#ff6600' }}>H·∫°ng th√†nh vi√™n: B·∫°c</span>
                    </>
                );
            case "V√†ng":
                return (
                    <>
                        <FaCrown size={30} style={{ color: "gold", marginRight: 8 }} />
                        <span style={{ color: 'navy', fontSize: '20px', color: '#ff6600' }}>H·∫°ng th√†nh vi√™n: V√†ng</span>
                    </>
                );
            case "B·∫°ch Kim":
                return (
                    <>
                        <FaStar size={30} style={{ color: "#E5E4E2", marginRight: 8 }} />
                        <span style={{ color: 'navy', fontSize: '20px', color: '#ff6600' }}>H·∫°ng th√†nh vi√™n: B·∫°ch Kim</span>
                    </>
                );
            case "Kim C∆∞∆°ng":
                return (
                    <>
                        <IoDiamondSharp size={30} style={{ color: "#00BFFF", marginRight: 8 }} />
                        <span style={{ color: 'navy', fontSize: '20px', color: '#ff6600' }}>H·∫°ng th√†nh vi√™n: Kim C∆∞∆°ng</span>
                    </>
                );
            default:
                return (
                    <>
                        <FaTrophy size={30} style={{ color: "#CD7F32", marginRight: 8 }} />
                        <span style={{ color: 'navy', fontSize: '20px', color: '#ff6600' }}>H·∫°ng th√†nh vi√™n: B·∫°c</span>
                    </>
                );
        }
    };

    return (
        <>
        <div className="rts-navigation-area-breadcrumb"  style={{fontSize:"14px"}}>
            <div className="container-2">
                <div className="row">
                <div className="col-lg-12">
                    <div className="navigator-breadcrumb-wrapper">
                    <a>Home</a>
                    <i className="fa-regular fa-chevron-right" />
                    <a className="current">T√†i kho·∫£n c·ªßa t√¥i</a>
                    </div>
                </div>
                </div>
            </div>
        </div>

        <div className="account-tab-area-start rts-section-gap">
            <div className="container-2">
                <div className="row">
                    <div className="col-lg-3">
                        <div className="nav accout-dashborard-nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                            <button className="nav-link active" id="v-pills-home-tab" data-bs-toggle="pill" data-bs-target="#v-pills-home" type="button" role="tab" aria-controls="v-pills-home" aria-selected="true"><RiDiscountPercentFill size={20} />M√£ gi·∫£m gi√°</button>
                            <button className="nav-link" id="v-pills-profile-tab" data-bs-toggle="pill" data-bs-target="#v-pills-profile" type="button" role="tab" aria-controls="v-pills-profile" aria-selected="false"><i className="fa-regular fa-bag-shopping" />L·ªãch s·ª≠ ƒë∆°n h√†ng</button>
                            <button className="nav-link" id="v-pills-settingsa-tab" data-bs-toggle="pill" data-bs-target="#v-pills-settingsa" type="button" role="tab" aria-controls="v-pills-settingsa" aria-selected="false"><i className="fa-light fa-user" />Th√¥ng tin t√†i kho·∫£n</button>
                            <button className="nav-link" id="v-pills-settingsa-tab" data-bs-toggle="pill" data-bs-target="#v-pills-settingdoimatkhau" type="button" role="tab" aria-controls="v-pills-settingdoimatkhau" aria-selected="false"><TbPasswordUser size={20} /> ƒê·ªïi m·∫≠t kh·∫©u</button>
                            <button className="nav-link" id="v-pills-settings-tab" onClick={() => message.success(`B·∫°n ƒëang c√≥ ${dataAcc?.quayMayManCount} l∆∞·ª£t quay v√≤ng quay may m·∫Øn`)} role="tab" aria-controls="v-pills-settings" aria-selected="false"><IoGift size={20} />S·ªë l∆∞·ª£t quay th∆∞·ªüng &nbsp; ({dataAcc?.quayMayManCount})</button>
                            <button className="nav-link" id="v-pills-settingsb-tab" type="button" role="tab"><a onClick={() => logoutClick()}><i className="fa-light fa-right-from-bracket" />ƒêƒÉng xu·∫•t</a></button>
                        </div>
                    </div>

                    <div className="col-lg-9 pl--50 pl_md--10 pl_sm--10 pt_md--30 pt_sm--30">
                        <div className="tab-content" id="v-pills-tabContent">
                            {/* Vouchers */}
                            <div className="tab-pane fade show active" id="v-pills-home" role="tabpanel" aria-labelledby="v-pills-home-tab" tabIndex={0}>
                                <div className="dashboard-account-area">
                                    <Row gutter={[30,30]}>
                                    {dataAccKH?.[0]?.IdVoucher?.length > 0 ? (
                                            dataAccKH[0].IdVoucher.map((item, index) => {
                                                return (
                                                    <Col span={8} key={index}>
                                                        <Card
                                                            actions={[
                                                                <Tooltip title="Sao ch√©p voucher" color={'green'} key={'green'}>
                                                                    <IoCopy
                                                                        size={25}
                                                                        onClick={() => {
                                                                        // Sao ch√©p m√£ voucher v√†o clipboard
                                                                        navigator.clipboard.writeText(item.code)
                                                                            .then(() => {
                                                                            message.success(`Voucher ${item.code} ƒë√£ ƒë∆∞·ª£c sao ch√©p!`);
                                                                            })
                                                                            .catch(() => {
                                                                            message.error("L·ªói khi sao ch√©p voucher!");
                                                                            });
                                                                        }}
                                                                    />
                                                                </Tooltip>,
                                                                <Tooltip title="ƒêi t·ªõi gi·ªè h√†ng" color={'green'} key={'green'}>
                                                                    <MdOutlineShoppingCartCheckout onClick={() => navigate('/mycart')} size={25} key="checkout" />
                                                                </Tooltip>,
                                                            ]}
                                                            style={{
                                                                minWidth: 300,
                                                            }}
                                                            hoverable
                                                        >
                                                            <Avatar size={70} src={imgVoucher} />
                                                            <span style={{ paddingLeft: "20px", fontSize: "20px", fontWeight: "500", color: "blue" }}>
                                                                {item.code} {/* Assuming voucher code is in `item.code` */}
                                                            </span> 
                                                            <br />
                                                            <span style={{ fontSize: "16px" }}>
                                                                ƒêi·ªÅu ki·ªán: Gi√° tr·ªã ƒë∆°n h√†ng tr√™n <span style={{ color: "red" }}> {parseInt(item.dieuKien).toLocaleString()}ƒë</span>
                                                            </span> 
                                                            <br />
                                                            <span style={{ fontSize: "16px" }}>
                                                                ƒê∆∞·ª£c gi·∫£m: <span style={{ color: "red" }}>{item.giamGia}%</span>
                                                            </span>
                                                            <br />
                                                            <span style={{ fontSize: "16px" }}>
                                                                Ng√†y h·∫øt h·∫°n: <span style={{ color: "red" }}>{item.thoiGianHetHan}</span>
                                                            </span>
                                                        </Card>
                                                    </Col>
                                                );
                                            })
                                        ) : (
                                            <div>Ch∆∞a c√≥ m√£ gi·∫£m gi√°</div>
                                        )
                                    }                                                                               
                                    </Row>
                                </div>                                
                            </div>

                            <div className="tab-pane fade" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab" tabIndex={0}>
                                <div className="order-table-account">
                                <div className="h3 title">ƒê∆°n H√†ng C·ªßa &nbsp;&nbsp;&nbsp;<span style={{color: "green"}}>{user?.fullName}</span></div>
                                <div className="table-responsive">
                                    <Table 
                                    onChange={onChange}
                                    pagination={{
                                        current: current,
                                        pageSize: pageSize,
                                        showSizeChanger: true,
                                        total: total,
                                        showTotal: (total, range) => { return (<div> {range[0]}-{range[1]} tr√™n {total} ƒë∆°n h√†ng</div>) }
                                    }}
                                    //  pagination={false}  // T·∫Øt ph√¢n trang m·∫∑c ƒë·ªãnh c·ªßa Table
                                    loading={loadingOrder} 
                                    columns={columns} 
                                    dataSource={dataOrder} />                                    
                                </div>
                                </div>

                                <DrawerViewOrder
                                openViewDH={openViewDH}
                                dataViewDH={dataViewDH}
                                setOpenViewDH={setOpenViewDH}
                                setDataViewDH={setDataViewDH}
                                />
                            </div>

                            <div className="tab-pane fade" id="v-pills-messages" role="tabpanel" aria-labelledby="v-pills-messages-tab" tabIndex={0}>
                                <div className="tracing-order-account">
                                <h2 className="title">Orders tracking</h2>
                                <p>
                                    To keep up with the status of your order, kindly input your OrderID in the designated box below and click the "Track" button. This unique identifier can be found on your receipt as well as in the confirmation email that was sent to you.
                                </p>
                                <form action="#" className="order-tracking">
                                    <div className="single-input">
                                    <label htmlFor="order-id">Order Id</label>
                                    <input type="text" placeholder="Found in your order confirmation email" required />
                                    </div>
                                    <div className="single-input">
                                    <label htmlFor="order-id">Billing email</label>
                                    <input type="text" placeholder="Email You use during checkout" />
                                    </div>
                                    <button className="rts-btn btn-primary">Track</button>
                                </form>
                                </div>
                            </div>

                            <div className="tab-pane fade" id="v-pills-settings" role="tabpanel" aria-labelledby="v-pills-settings-tab" tabIndex={0}>
                                <div className="shipping-address-billing-address-account">
                                    <div className="half">
                                        <h2 className="title">ƒê·ªãa ch·ªâ c·ªßa t√¥i</h2>
                                        
                                    </div>
                               
                                </div>
                            </div>

                            {/* t√†i kho·∫£n c·ªßa t√¥i */}
                            <div className="tab-pane fade" id="v-pills-settingsa" role="tabpanel" aria-labelledby="v-pills-settingsa-tab" tabIndex={0}>
                                <h2 className="title">Th√¥ng tin chi ti·∫øt</h2>                                
                                <Form
                                    form={formAcc}
                                    className="registration-form"                                
                                    layout="vertical"                                    
                                >
                                    <Divider/>
                                    <Row gutter={[20,2]}>                                        
                                        <Form.Item name="_idAcc" hidden><Input hidden /></Form.Item>
                                        <Col span={24} md={24} sm={24} xs={24}>
                                            <Form.Item name="_idAcc" style={{textAlign: "center"}}>
                                                <Avatar size={150} src={imageUrl.url} /> 
                                                <p className="mt-4" style={{ color: '#ff6600', marginRight: '8px', fontSize: "30px"}}>                                                    
                                                    {renderMemberRank(dataAcc?.hangTV)}
                                                </p>
                                            </Form.Item>
                                        </Col>
                                        <Row gutter={[16, 16]} style={{ background: '#f9f9f9', padding: '20px', borderRadius: '15px', textAlign:'center', width: '100%',  }}>
                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><FaUser /> &nbsp;H·ªç v√† t√™n:</Text>
                                                <Text style={{ display: 'block', color: 'navy', fontSize: '20px' }}>{ dataAcc?.fullName || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
                                            </Col>

                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><MdEmail /> &nbsp;Email:</Text>
                                                <Text style={{ display: 'block', color: 'navy', fontSize: '20px' }}>{ dataAcc?.email || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
                                            </Col>

                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><FaPhone /> &nbsp;S·ªë ƒëi·ªán tho·∫°i:</Text>
                                                <Text style={{ display: 'block', color: 'navy', fontSize: '20px' }}>{ dataAcc?.phone || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
                                            </Col>

                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><FaAddressCard /> &nbsp;ƒê·ªãa ch·ªâ:</Text>
                                                <Text style={{ display: 'block', color: 'navy', fontSize: '20px' }}>{ dataAcc?.address || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
                                            </Col>

                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><MdOutlineProductionQuantityLimits /> &nbsp;T·ªïng ƒë∆°n h√†ng:</Text>
                                                <Text style={{ display: 'block', color: 'red', fontSize: '20px' }}>{ soLuongDonThanhCong || 0} ƒë∆°n h√†ng</Text>
                                            </Col>

                                            <Col span={12} md={12} sm={24} xs={24}>
                                                <Text strong style={{fontSize: '20px'}}><FaCartPlus /> &nbsp;T·ªïng doanh thu:</Text>
                                                <Text style={{ display: 'block', color: 'red', fontSize: '20px' }}>{ tongDoanhThuThanhCong.toLocaleString("vi-VN") || 0}ƒë</Text>
                                            </Col>
                                        </Row>                                        

                                    </Row>                                    
                                </Form>                                
                            </div>

                            {/* ƒë·ªïi m·∫≠t kh·∫©u */}
                            <div className="tab-pane fade" id="v-pills-settingdoimatkhau" role="tabpanel" aria-labelledby="v-pills-settingsa-tab" tabIndex={0}>
                                <h2 className="title">ƒê·ªïi Th√¥ng Tin Chi Ti·∫øt</h2>                                
                                <Form
                                    form={formAcc}
                                    className="registration-form"                                
                                    layout="vertical"                                    
                                    onFinish={handleDoiTT} 
                                >
                                    <Divider/>
                                    <Row gutter={[20,2]}>
                                        {/* <Col span={4} md={4} sm={24} xs={24}>
                                            <span style={{fontSize: "20px"}}>·∫¢nh ƒë·∫°i di·ªán: </span>
                                            <Avatar style={{marginTop: "5px", marginBottom: "10px"}} size={100} src={`${import.meta.env.VITE_BACKEND_URL}/uploads/${dataAcc?.image}`} />
                                        </Col> */}
                                        <Form.Item name="_idAcc" hidden><Input hidden /></Form.Item>
                                            <Col span={24} md={24} sm={24} xs={24}>
                                            <Form.Item
                                                label="Upload ·∫¢nh ƒë·∫°i di·ªán"
                                                name="image"                                                
                                                hasFeedback
                                            >
                                                <Upload
                                                    name="file"
                                                    listType="picture-card"
                                                    className="avatar-uploader"
                                                    maxCount={1}
                                                    multiple={false}
                                                    customRequest={handleUploadFileImage}
                                                    beforeUpload={beforeUpload}
                                                    onChange={handleChange}
                                                    // onRemove={handleRemoveFile}
                                                    onRemove={(file) =>
                                                        handleRemoveFile(file, "thumbnail")
                                                    }
                                                    fileList={fileList} // G√°n danh s√°ch file
                                                    onPreview={handlePreview}
                                                >
                                                    <div>
                                                        {loading ? <LoadingOutlined /> : <PlusOutlined />}
                                                        <div style={{ marginTop: 8 }}>Upload</div>
                                                    </div>
                                                </Upload>

                                                <Modal
                                                    visible={isModalVisible}
                                                    footer={null}
                                                    title="Xem H√¨nh ·∫¢nh"
                                                    onCancel={() => setIsModalVisible(false)}
                                                >
                                                    <img alt="Uploaded" style={{ width: '100%' }} src={imageUrl} />
                                                </Modal>
                                            </Form.Item> 
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                labelCol={{span: 24}}
                                                label="H·ªç v√† t√™n"
                                                name="fullName"
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },
                                                    {
                                                        required: false,
                                                        pattern: new RegExp(/^[A-Za-z√Ä-·ªπ\s]+$/),
                                                        message: 'Kh√¥ng ƒë∆∞·ª£c nh·∫≠p s·ªë!',
                                                    },
                                                ]}
                                                hasFeedback
                                            >
                                                <Input placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n" />
                                            </Form.Item> 
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                label="Email"                                        
                                                name="email"                                                
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },
                                                    {
                                                        type: "email",
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng ƒë·ªãa ch·ªâ email',
                                                    },

                                                ]}
                                                hasFeedback
                                            ><Input disabled placeholder="Nh·∫≠p email c·ªßa b·∫°n" />
                                            </Form.Item>
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                label="S·ªë ƒêi·ªán Tho·∫°i"
                                                name="phone"
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },
                                                    {
                                                        pattern: /^0\d{9}$/,
                                                        message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë v√† b·∫≥t ƒë·∫ßu b·∫±ng s·ªë 0, kh√¥ng ch·ª©a k√≠ t·ª±!',
                                                    },
                                                ]}
                                                hasFeedback
                                            >
                                                <Input placeholder='V√≠ d·ª•: 0972138493' />
                                            </Form.Item> 
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                label="ƒê·ªãa ch·ªâ"
                                                name="address"
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },                                                    
                                                ]}
                                                hasFeedback
                                            >
                                                <Input placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ...' />
                                            </Form.Item> 
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                label="M·∫≠t kh·∫©u c≈©"
                                                name="password"
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },                                                    
                                                ]}
                                                hasFeedback
                                            >
                                                <Input.Password placeholder='Nh·∫≠p m·∫≠t kh·∫©u c≈©' />
                                            </Form.Item> 
                                        </Col>
                                        <Col span={12} md={12} sm={24} xs={24}>
                                            <Form.Item
                                                label="M·∫≠t kh·∫©u m·ªõi"
                                                name="passwordMoi"
                                                rules={[
                                                    {
                                                        required: true,
                                                        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                                                    },                                                    
                                                ]}
                                                hasFeedback
                                            >
                                                <Input.Password placeholder='Nh·∫≠p m·∫≠t kh·∫©u mu·ªën ƒë·ªïi m·ªõi' />
                                            </Form.Item> 
                                        </Col>

                                        <Col span={6} style={{margin: "auto"}}>
                                            <Button onClick={() => formAcc.submit()} type="primary" size="large" icon={<FaSave size={25} />}>ƒê·ªïi th√¥ng tin</Button>
                                        </Col>

                                    </Row>                                    
                                </Form>                                
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>


        </>
    )
}
export default Account